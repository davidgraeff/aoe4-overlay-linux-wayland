<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/system_tray.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/system_tray.rs" />
              <option name="originalContent" value="use anyhow::Result;&#10;use gtk::gio;&#10;use log::info;&#10;use std::sync::{&#10;    Arc,&#10;    atomic::{AtomicBool, Ordering},&#10;};&#10;use gtk::prelude::{ActionMapExt, ApplicationExt};&#10;&#10;pub struct SystemTray {&#10;    _app: gtk::Application,&#10;}&#10;&#10;impl SystemTray {&#10;    pub fn new(should_quit: Arc&lt;AtomicBool&gt;) -&gt; Result&lt;Self&gt; {&#10;        // Create an application for the system tray&#10;        let app = gtk::Application::builder()&#10;            .application_id(&quot;com.aoe4.overlay.tray&quot;)&#10;            .flags(gio::ApplicationFlags::DEFAULT_FLAGS)&#10;            .build();&#10;        &#10;        // Create a simple action for quit&#10;        let quit_action = gio::SimpleAction::new(&quot;quit&quot;, None);&#10;        let should_quit_clone = Arc::clone(&amp;should_quit);&#10;        quit_action.connect_activate(move |_, _| {&#10;            info!(&quot;Quit action triggered from menu&quot;);&#10;            should_quit_clone.store(true, Ordering::Relaxed);&#10;        });&#10;        &#10;        app.add_action(&amp;quit_action);&#10;        &#10;        // Register the application (required for actions to work)&#10;        app.register(None::&lt;&amp;gio::Cancellable&gt;)?;&#10;        &#10;        // Create a notification to indicate the app is running&#10;        // Note: This is a fallback since GTK4 on Wayland doesn't have traditional system tray&#10;        let notification = gio::Notification::new(&quot;AOE4 Overlay&quot;);&#10;        notification.set_body(Some(&quot;Running - Press Ctrl+C to quit&quot;));&#10;        notification.add_button(&quot;Quit&quot;, &quot;app.quit&quot;);&#10;        &#10;        // Send the notification&#10;        app.send_notification(Some(&quot;running&quot;), &amp;notification);&#10;        &#10;        info!(&quot;Application notification created (GTK4/Wayland system tray alternative)&quot;);&#10;        info!(&quot;Use Ctrl+C in terminal or close the overlay window to quit&quot;);&#10;&#10;        Ok(Self {&#10;            _app: app,&#10;        })&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="use anyhow::Result;&#10;use gtk::gio;&#10;use log::info;&#10;use std::sync::{&#10;    Arc,&#10;    atomic::{AtomicBool, Ordering},&#10;};&#10;use gtk::prelude::{ActionMapExt, ApplicationExt};&#10;&#10;pub struct SystemTray {&#10;    _app: gtk::Application,&#10;}&#10;&#10;impl SystemTray {&#10;    pub fn new(should_quit: Arc&lt;AtomicBool&gt;) -&gt; Result&lt;Self&gt; {&#10;        // Create an application for the system tray&#10;        let app = gtk::Application::builder()&#10;            .application_id(&quot;com.aoe4.overlay.tray&quot;)&#10;            .flags(gio::ApplicationFlags::DEFAULT_FLAGS)&#10;            .build();&#10;        &#10;        // Create a simple action for quit&#10;        let quit_action = gio::SimpleAction::new(&quot;quit&quot;, None);&#10;        let should_quit_clone = Arc::clone(&amp;should_quit);&#10;        quit_action.connect_activate(move |_, _| {&#10;            info!(&quot;Quit action triggered from menu&quot;);&#10;            should_quit_clone.store(true, Ordering::Relaxed);&#10;        });&#10;        &#10;        app.add_action(&amp;quit_action);&#10;        &#10;        // Register the application (required for actions to work)&#10;        app.register(None::&lt;&amp;gio::Cancellable&gt;)?;&#10;        &#10;        // Create a notification to indicate the app is running&#10;        // Note: This is a fallback since GTK4 on Wayland doesn't have traditional system tray&#10;        let notification = gio::Notification::new(&quot;AOE4 Overlay&quot;);&#10;        notification.set_body(Some(&quot;Running - Press Ctrl+C to quit&quot;));&#10;        notification.add_button(&quot;Quit&quot;, &quot;app.quit&quot;);&#10;        &#10;        // Send the notification&#10;        app.send_notification(Some(&quot;running&quot;), &amp;notification);&#10;        &#10;        info!(&quot;Application notification created (GTK4/Wayland system tray alternative)&quot;);&#10;        info!(&quot;Use Ctrl+C in terminal or close the overlay window to quit&quot;);&#10;&#10;        Ok(Self {&#10;            _app: app,&#10;        })&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>