//! # D-Bus interface proxy for: `org.freedesktop.portal.ScreenCast`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/portal/desktop' from service
//! 'org.freedesktop.portal.Desktop' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,

use zbus::proxy;

#[proxy(
    interface = "org.freedesktop.portal.ScreenCast",
    default_service = "org.freedesktop.portal.Desktop",
    default_path = "/org/freedesktop/portal/desktop"
)]
pub trait ScreenCast {
    /// CreateSession method
    fn create_session(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;
    /// OpenPipeWireRemote method
    fn open_pipe_wire_remote(
        &self,
        session_handle: &zbus::zvariant::ObjectPath<'_>,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<zbus::zvariant::OwnedFd>;

    /// SelectSources method
    fn select_sources(
        &self,
        session_handle: &zbus::zvariant::ObjectPath<'_>,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Start method
    fn start(
        &self,
        session_handle: &zbus::zvariant::ObjectPath<'_>,
        parent_window: &str,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// AvailableCursorModes property
    #[zbus(property)]
    fn available_cursor_modes(&self) -> zbus::Result<u32>;

    /// AvailableSourceTypes property
    #[zbus(property)]
    fn available_source_types(&self) -> zbus::Result<u32>;

    /// version property
    #[zbus(property, name = "version")]
    fn version(&self) -> zbus::Result<u32>;
}

