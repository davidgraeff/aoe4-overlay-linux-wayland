* UI overlay window
  - [x] Implement a semi-transparent overlay window that displays on top of all other windows for debugging the captured frames.
  - [x] Ensure the application can be quit with a global keyboard shortcut (implemented via Ctrl-C, global shortcuts on Wayland are limited by design for security).
  - [x] Add a notification area icon with a menu item to be able to quit the application.
  - [x] Add functionality via application config parameters (clap) to customize the opacity, size and position of the overlay window.
* Screen recording on Wayland (via dbus org.freedesktop.portal.ScreenCast)
  - [x] Get a pipewire handle for screen capture using the ScreenCast portal for a full screen.
    - [x] Capture only a specific application window (e.g. a game) instead of the full screen, configurable via clap.
  - [x] Use pipewire to connect to the stream and provide a callback with the video frames (see https://docs.pipewire.org/page_tutorial5.html).
  - [x] Only start capturing when a certain process is running (e.g. a game).
    - [x] Add functionality via application config parameters (clap) to customize the process name and check interval.
* Object detection / Computer Vision to detect game notification boxes (villagers in queue etc)
  - [x] Use OpenCV to process the captured frames and detect specific UI elements (e.g. villagers in queue notification box).
  - [x] Implement template matching to identify the villager icon in the notification area.
* Use OCR to read text from the detected notification boxes and from the entire frame
  - [x] Integrate OCR to read text. The text locations do not change, so we can crop the image to only the relevant areas.
  - [x] Extract and log the relevant information (e.g. game statistics like population, resources, workers).
* Integration of OCR and object detection into main application
  - [x] Create ImageAnalyzer module with OCR and template matching functionality.
  - [x] Create FrameProcessor module with async processing pipeline.
  - [x] Use bounded tokio channels to send captured frames from PipeWire to the frame processor.
  - [x] Use tokio channels to send processed frames (with analysis results) to the GTK UI thread.
  - [x] Display the extracted information with annotations in the overlay window.
  - [x] Implement complete processing pipeline: PipeWire -> FrameProcessor -> GTK Overlay.
